
esphome:
  name: "test-esp8266-wiegand"
  friendly_name: test-8266-wiegand
 
################################################################
preferences:
  flash_write_interval: 1sec
################################################################

#esp32:
#  board: esp32-c3-devkitm-1
#  framework:
#    type: arduino
  
esp8266:
  board: esp01_1m
  restore_from_flash: true

 

 
logger:
  level: INFO
  logs:
    text_sensor: error
    number: ERROR
    sensor: ERROR
    ultrasonic.sensor: ERROR

# Enable Home Assistant API
api:

##############################################################
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
##############################################################
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: peppe4
    - password: !secret wifi_password4
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe6
    - password: !secret wifi_password6
  manual_ip:
    static_ip: 192.168.1.111
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:
 
#########################################################################
web_server:
  version: 3
#########################################################################

#########################################################################
text_sensor:
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server:
        sorting_weight: 7
      
  - platform: template
    name: "Uptime:"
    lambda: |-
      int seconds = (id(uptimex).state);
      String days = String(seconds / (24 * 3600));
      //if (days.length() == 1)
      //{
      //days="0" + days;
      //}
      seconds = seconds % (24 * 3600); 
      String hours = String(seconds / 3600);
      if (hours.length() == 1)
      {
      hours="0" + hours;
      }
      seconds = seconds % 3600;
      String minutes = String(seconds /  60);
      if (minutes.length() == 1)
      {
      minutes="0" + minutes;
      }
      String second = String(seconds % 60);
      if (second.length() == 1)
      {
      second="0" + second;
      }
      return { (days +" g; " + hours +" h " + minutes +" m e "+ second +" s").c_str() };
      //return { (String(days) +"g " + String(hours) +"h:" + String(minutes) +"m:"+ String(seconds) +"s").c_str() };
 
    icon: mdi:clock-start
    update_interval: 5s

  - platform: template
    name: "Last Scanned Tag"
    id: homeassistant_tag_scanned
#########################################################################
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server:
      sorting_weight: 8
    update_interval: 10s

  - platform: uptime
    name: "Uptime"
    internal: true
    id: uptimex
    update_interval: 5s
# Usa un output GPIO con id "led_builtin"

globals:
  - id: authorized_tags_1
    type: std::vector<uint64_t>  # Ora il tipo è corretto
    initial_value: '{55284178, 87654321, 55284172, 46409603}'  # I badge devono essere numeri
  
  - id: authorized_tags_2
    type: std::vector<uint64_t>  # Ora il tipo è corretto
    initial_value: '{10349630, 46409603}'  # I badge devono essere numeri
  
  - id: authorized_tags_3
    type: std::vector<uint64_t>  # Ora il tipo è corretto
    initial_value: '{55284171, 46409603}'  # I badge devono essere numeri

  - id: authorized_code_tags
    type: std::vector<uint64_t>  # Ora il tipo è corretto
    #codici:         197583  , 111111,
    initial_value: '{1193046, 31317469, 64722771}'  # I badge devono essere numeri
    
  - id: last_tag
    type: uint64_t
    restore_value: True
    initial_value: '0'  # L'ultimo tag letto sarà un numero
  
  - id: tag_history
    type: std::vector<std::string>
    initial_value: ""


output:
  - platform: gpio
    pin:
      number: GPIO2
      inverted: true
    id: led_builtin  # ID dell'output come richiesto

switch:
  - platform: template
    id: tag_scan_enabled
    name: "Abilita Tastiera"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

wiegand:
  - id: mykeypad
    d0: GPIO1
    d1: GPIO3
    on_key:
      - lambda: |-
          ESP_LOGI("KEY", "received key %d", x);
    on_tag:
       
      - if:
          condition:
            switch.is_on: tag_scan_enabled
          then:
            - lambda: |-
                id(tag_history).push_back(x);
                if (id(tag_history).size() > 24) {
                  id(tag_history).erase(id(tag_history).begin());  // Mantiene solo gli ultimi 24 tag
                }

                std::string tags_concatenati;
                for (const auto& tag : id(tag_history)) {
                    // Aggiungi gli zeri a sinistra per ogni tag e concatenalo
                    char formatted_tag[11];  // 10 cifre + terminatore nullo
                    snprintf(formatted_tag, sizeof(formatted_tag), "%010llu", std::stoull(tag));  // Formatta a 10 cifre
                    
                    // Aggiungi il tag formattato alla lista con la virgola e il newline
                    tags_concatenati += std::string(formatted_tag) + ", \n";
                }
                if (!tags_concatenati.empty()) {
                    tags_concatenati.pop_back();  // Rimuove l'ultima virgola
                    tags_concatenati.pop_back();  // Rimuove l'ultimo spazio
                }

                id(homeassistant_tag_scanned).publish_state(tags_concatenati); 




            - lambda: |-
                ESP_LOGI("TAG", "Tastiera ABILITATA");
                ESP_LOGI("TAG", "Badge ricevuto: %s", x.c_str());
                uint64_t received_tag = std::stoull(x.c_str());  // Usa stoull per convertire la stringa in uint64_t
                bool access_granted = false;

                // Controlla se il tag è nella LISTA 1 → LED 1
                for (const auto& tag : id(authorized_tags_1)) {
                  if (tag == received_tag) {
                    ESP_LOGI("ACCESSO", "Badge valido per LED 1!");
                    id(led_builtin).turn_on();  // Accendi LED 1
                    delay(200);  // LED acceso per 5 secondi
                    id(led_builtin).turn_off();  // Spegni il LED
                    access_granted = true;  // Accesso concesso
                    break;
                  }
                }

                // Controlla se il tag è nella LISTA 2 → LED 2
                for (const auto& tag : id(authorized_tags_2)) {
                  if (tag == received_tag) {
                    ESP_LOGI("ACCESSO", "Badge valido per LED 2!");
                    id(led_builtin).turn_on();  // Accendi LED 2
                    delay(100);  // LED acceso per 5 secondi
                    id(led_builtin).turn_off();  // Spegni il LED
                    access_granted = true;  // Accesso concesso
                    break;
                  }
                }

                // Controlla se il tag è nella LISTA 3 → LED 3
                for (const auto& tag : id(authorized_tags_3)) {
                  if (tag == received_tag) {
                    ESP_LOGI("ACCESSO", "Badge valido per LED 3!");
                    id(led_builtin).turn_on();  // Accendi LED 2
                    delay(100);  // LED acceso per 5 secondi
                    id(led_builtin).turn_off();  // Spegni il LED
                    access_granted = true;  // Accesso concesso
                    break;
                  }
                }


                // Controlla se il tag è nella CODE LIST → LED 4
                for (const auto& tag : id(authorized_code_tags)) {
                  if (tag == received_tag) {
                    ESP_LOGI("ACCESSO", "CODICE valido per LED 4!");
                    id(led_builtin).turn_on();  // Accendi LED 4
                    delay(100);  // LED acceso per 5 secondi
                    id(led_builtin).turn_off();  // Spegni il LED
                    access_granted = true;  // Accesso concesso
                    break;
                  }
                }

                // Se il tag non è in nessuna lista
                if (!access_granted) {
                  ESP_LOGI("ACCESSO", "Badge non autorizzato!");
                }
            - homeassistant.tag_scanned: !lambda 'return x.c_str();'
          else:
            - lambda: |-
                ESP_LOGI("TAG", "Tastiera DISABILITATA");
    on_raw:
      - lambda: |-
          ESP_LOGI("RAW", "Badge ricevuto: %u", value);

     
