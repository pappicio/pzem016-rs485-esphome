
esphome:
  name: "test-esp8266-ultrasuoni"
  friendly_name: test-8266-ultrasuoni
 
################################################################
preferences:
  flash_write_interval: 1sec
################################################################

#esp32:
#  board: esp32-c3-devkitm-1
#  framework:
#    type: arduino
  
esp8266:
  board: esp01_1m
  restore_from_flash: true

 

 
logger:
  level: DEBUG
  logs:
    text_sensor: error
    number: ERROR
    sensor: ERROR
    ultrasonic.sensor: ERROR

# Enable Home Assistant API
api:

##############################################################
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
##############################################################
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: peppe4
    - password: !secret wifi_password4
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe6
    - password: !secret wifi_password6
  manual_ip:
    static_ip: 192.168.1.111
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:
 
#########################################################################
web_server:
  version: 3
#########################################################################

#########################################################################
text_sensor:
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server:
        sorting_weight: 7
      
  - platform: template
    name: "Uptime:"
    lambda: |-
      int seconds = (id(uptimex).state);
      String days = String(seconds / (24 * 3600));
      //if (days.length() == 1)
      //{
      //days="0" + days;
      //}
      seconds = seconds % (24 * 3600); 
      String hours = String(seconds / 3600);
      if (hours.length() == 1)
      {
      hours="0" + hours;
      }
      seconds = seconds % 3600;
      String minutes = String(seconds /  60);
      if (minutes.length() == 1)
      {
      minutes="0" + minutes;
      }
      String second = String(seconds % 60);
      if (second.length() == 1)
      {
      second="0" + second;
      }
      return { (days +" g; " + hours +" h " + minutes +" m e "+ second +" s").c_str() };
      //return { (String(days) +"g " + String(hours) +"h:" + String(minutes) +"m:"+ String(seconds) +"s").c_str() };
 
    icon: mdi:clock-start
    update_interval: 5s
#########################################################################

 
# Device specific Config Begins Below #
#######################################
# Configurazione del LED interno come luce PWM
#light:
#  - platform: monochromatic
#    name: "LED Interno ESP32-C3"
#    output: led_pwm_output
#    id: led_light
#    restore_mode: RESTORE_DEFAULT_OFF
   
   
 
 



    # Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

# Exposed switches.
# Switch to restart the salt_level_sensor.   
switch:
  - platform: restart
    name: "restart device"
    



globals:
  - id: triggered
    type: bool
    restore_value: no
    initial_value: "false"
    
  - id: led_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: saved_brightness_value
    type: float
    restore_value: true
    initial_value: '0.0'


# Usa un output GPIO con id "led_builtin"
output:
  - platform: gpio
    pin:
      number: GPIO2
      inverted: true
    id: led_builtin  # ID dell'output come richiesto

# 
# Binary sensor per leggere lo stato del LED
binary_sensor:
  - platform: template
    name: "Stato LED Interno"
    lambda: |-
      return id(led_state);  //# Monitora lo stato del LED tramite la variabile led_state


#########################################################################
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server:
      sorting_weight: 8
    update_interval: 10s

  - platform: uptime
    name: "Uptime"
    internal: true
    id: uptimex
    update_interval: 5s



    
#######################################
  # Uptime sensor.
  - platform: uptime
    name: avviato da
    
  - platform: ultrasonic
    internal: True
    trigger_pin: GPIO5
    echo_pin: GPIO4
    name: "cm sensore ultrasuoni"
    id: level
    update_interval: 200ms
    filters:
      - lambda: |-
          static float last_distance = 0.0;
          if (abs(x - last_distance) >= 0.03) {  // Differenza ≥ 3 cm
            id(led_state)=true;
            id(led_builtin).turn_on(); 
            id(led_blink).execute();
          }
          else
          {
            // Se il bypass è attivo, non spegnere il LED
            if (!id(triggered)) {
              id(led_builtin).turn_off();  // Spegne il LED solo se il bypass non è attivo
              id(led_state) = false;  // Assicura che led_state sia false quando il LED è spento
            }
          }
          last_distance = x;  // Salva la distanza attuale
          return x ;

 

  - platform: template
    name: "sensore ultrasuoni in %"
    update_interval: 250ms
    lambda: return (0.42-id(level).state)*(100/0.42);
    unit_of_measurement: "%"
    
  - platform: template
    name: "sensore ultrasuoni in cm"
    update_interval: 250ms
    lambda: return (id(level).state * 100);
    #- lambda: return (0.42-id(level).state)*100;
    unit_of_measurement: "cm"

script:
  
  - id: led_blink
    mode: restart  # Permette di eseguire sempre lo script se viene richiamato anche se gia in esecuzione.
    then:
      - lambda: |-
          id(triggered) = true;  // Imposta led_state su true (LED acceso)
      - delay: 1s
      - lambda: |-
          id(triggered) = false;  // Imposta led_state su false (LED spento)
          
