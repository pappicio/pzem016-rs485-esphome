
esphome:
  name: 'pzem-016-rs485'
  friendly_name:  pzem-016 RS485
  name_add_mac_suffix: false

#esp8266
#esphome:
#  name: stampa-3d
#  friendly_name: stampa-3d
esp8266:
  board: esp01_1m
  restore_from_flash: true
################################################################
# Memorizzazione dati in EEPROM
preferences:
  flash_write_interval: 30s  # Scrive in EEPROM ogni 30 secondi per preservare la memoria
 
################################################################

#esp32:
#  board: esp32-c3-devkitm-1
#  framework:
#    type: arduino

# Enable logging
logger:
  level: DEBUG
  logs:
    text_sensor: error
    number: ERROR
    sensor: ERROR
    pzemac: ERROR
# Enable Home Assistant API
api:

##############################################################
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
##############################################################
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: peppe4
    - password: !secret wifi_password4
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe1
    - password: !secret wifi_password1
    - ssid: peppe6
    - password: !secret wifi_password6
  manual_ip:
    static_ip: 192.168.1.102
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:

#dashboard_import:
#  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@v2
#  import_full_config: true

#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
#########################################################################
web_server:
  version: 3
#########################################################################
 

#########################################################################
text_sensor:
 
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server:
        sorting_weight: 7
 
  - platform: template
    name: "Uptime:"
    lambda: |-
      int seconds = (id(uptimex).state);
      String days = String(seconds / (24 * 3600));
      //if (days.length() == 1)
      //{
      //days="0" + days;
      //}
      seconds = seconds % (24 * 3600); 
      String hours = String(seconds / 3600);
      if (hours.length() == 1)
      {
      hours="0" + hours;
      }
      seconds = seconds % 3600;
      String minutes = String(seconds /  60);
      if (minutes.length() == 1)
      {
      minutes="0" + minutes;
      }
      String second = String(seconds % 60);
      if (second.length() == 1)
      {
      second="0" + second;
      }
      return { (days +"g; " + hours +"h " + minutes +"m e "+ second +"s").c_str() };
      //return { (String(days) +"g " + String(hours) +"h:" + String(minutes) +"m:"+ String(seconds) +"s").c_str() };
 
    icon: mdi:clock-start
    update_interval: 10s
#########################################################################
  
uart: # E' una serial software (SI POSSONO USARE ANCHE I PIN DELLA HARDWARE)
  id: uartx
  rx_pin: GPIO1 # ERA D5
  tx_pin: GPIO3 # ERA D6
  baud_rate: 9600
  stop_bits: 1
  
globals:
  - id: energia_giorno
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: energia_ieri
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: energia_settimana
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: energia_mese
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: energia_anno
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_settimana_scorsa
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_mese_scorso
    type: float
    restore_value: true
    initial_value: "0.0"

  # Variabili globali per i consumi stagionali (con salvataggio)
  - id: energia_primavera
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_estate
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_autunno
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_inverno
    type: float
    restore_value: true
    initial_value: "0.0"

  - id: energia_offset
    type: float
    restore_value: true  # Mantiene il valore dopo il riavvio
    initial_value: "0.0"

button:
  - platform: template
    name: "Resetta tutti i conteggi di Energia"
    id: reset_totale_energia
    icon: "mdi:restart"
    on_press:
      - uart.write:
          id: uartx
          data: [0x42, 0x00]  # Comando per resettare l'energia (0x42)
      - lambda: |-
          //id(energia_totale)->publish_state(0.0);
          id(energia_giorno) = 0.0;
          id(energia_ieri) = 0.0;
          id(energia_settimana) = 0.0;
          id(energia_settimana_scorsa) = 0.0;
          id(energia_mese) = 0.0;
          id(energia_mese_scorso) = 0.0;
          id(energia_anno) = 0.0;
          id(energia_primavera) = 0.0;
          id(energia_estate) = 0.0;
          id(energia_autunno) = 0.0;
          id(energia_inverno) = 0.0;
          ESP_LOGD("RESET", "Tutti i valori energetici sono stati resettati!");
          id(energia_offset) = id(energia_totale_raw).state;


#########################################################################
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server:
      sorting_weight: 8
    update_interval: 10s

  - platform: uptime
    name: "Uptime"
    internal: true
    id: uptimex
    update_interval: 10s
#########################################################################
 
# ‚ö° Sensore PZEM-016: Potenza
  - platform: pzemac
    current:
      name: "Corrente"
      icon: "mdi:alpha-a-circle"
    voltage:
      name: "Voltaggio"
      icon: "mdi:alpha-v-circle"
    power:
      name: "Potenza"
      id: pzem_power
      icon: "mdi:alpha-w-circle"
    frequency:
      name: "Frequenza"
      icon: "mdi:alpha-f-circle"
    power_factor:
      name: "Fattore di Potenza"
      icon: "mdi:alpha-p-circle"
    energy:
      name: "Energia Totale (fixed)"
      id: energia_totale_raw 
      icon: "mdi:alpha-e-circle"
      unit_of_measurement: "kWh"
      accuracy_decimals: 2
      filters:
        - multiply: 0.001  # Converte Wh in kWh
        ###- lambda: return x - id(energia_offset);  # Sottrae l'offset
      on_value:
        then:
          - component.update: energia_totale  # Aggiorna il sensore template

    update_interval: 5s

  - platform: template
    name: "Energia Totale (Azz.)"
    id: energia_totale
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:flash"
    update_interval: 10s
    lambda: |-
      return id(energia_totale_raw).state - id(energia_offset);

  - platform: total_daily_energy
    name: "Energia Oggi (fixed)"
    id: energia_giornox
    power_id: pzem_power  # Collega il sensore di potenza
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-today"
    restore: true
    filters:
      - multiply: 0.001  # Convertiamo Wh a kWh
  
 
  - platform: template
    name: "Energia oggi (Azz.)"
    id: energia_giorno_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-today"
    lambda: |-
      static float last_energy = 0.0;
      float current_energy = id(energia_totale).state;

      if (current_energy > last_energy) {  
          float diff = current_energy - last_energy;
          id(energia_giorno) += diff;  
          id(energia_settimana) += diff;  
          id(energia_mese) += diff;  
          id(energia_anno) += diff;  
      }

      last_energy = current_energy;  
      return id(energia_giorno);  

  - platform: template
    name: "Energia Ieri"
    id: energia_ieri_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:clock-outline
    lambda: |-
      return id(energia_ieri);

  - platform: template
    name: "Energia Settimanale"
    id: energia_settimana_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-week"
    lambda: |-
      return id(energia_settimana);

  - platform: template
    name: "Energia Mensile"
    id: energia_mese_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-month"
    lambda: |-
      return id(energia_mese);

  - platform: template
    name: "Energia Annuale"
    id: energia_anno_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar"
    lambda: |-
      return id(energia_anno);


# Sensori per ogni stagione (Primavera, Estate, Autunno, Inverno)
  # Energia Primavera
  - platform: template
    name: "Energia Primavera"
    id: energia_primavera_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    lambda: |-
      return id(energia_primavera);
    icon: "mdi:flower"  # üåº Icona per la Primavera

  # Energia Estate
  - platform: template
    name: "Energia Estate"
    id: energia_estate_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    lambda: |-
      return id(energia_estate);
    icon: "mdi:white-balance-sunny"  # ‚òÄÔ∏è Icona per l'Estate

  # Energia Autunno
  - platform: template
    name: "Energia Autunno"
    id: energia_autunno_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    lambda: |-
      return id(energia_autunno);
    icon: "mdi:leaf"  # üçÇ Icona per l'Autunno

  # Energia Inverno
  - platform: template
    name: "Energia Inverno"
    id: energia_inverno_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    lambda: |-
      return id(energia_inverno);
    icon: "mdi:snowflake"  # Icona per l'Inverno

  - platform: template
    name: "Energia Settimana Scorsa"
    id: energia_settimana_scorsa_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-week"
    lambda: |-
      return id(energia_settimana_scorsa);

  - platform: template
    name: "Energia Mese Scorso"
    id: energia_mese_scorso_sensor
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: "mdi:calendar-month"
    lambda: |-
      return id(energia_mese_scorso);

    
  # Sensore per aggiornare i consumi stagionali
  - platform: template
    internal: True
    name: "Energia Stagionale"
    id: energia_stagionale
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    lambda: |-
      static float last_energy = 0.0;
      float current_energy = id(energia_totale).state;

      if (current_energy > last_energy) {  
          float diff = current_energy - last_energy;

          // Ottiene il giorno dell'anno
          auto time = id(homeassistant_time).now();
          int day_of_year = time.day_of_year;

          // Primavera: 21 marzo - 20 giugno (giorni 80-171)
          if (day_of_year >= 80 && day_of_year <= 171) {
              id(energia_primavera) += diff;
          }
          // Estate: 21 giugno - 20 settembre (giorni 172-263)
          else if (day_of_year >= 172 && day_of_year <= 263) {
              id(energia_estate) += diff;
          }
          // Autunno: 21 settembre - 20 dicembre (giorni 264-355)
          else if (day_of_year >= 264 && day_of_year <= 355) {
              id(energia_autunno) += diff;
          }
          // Inverno: 21 dicembre - 20 marzo (giorni 356-365 e 1-79)
          else {
              id(energia_inverno) += diff;
          }
      }

      last_energy = current_energy;
      return 0; // Il sensore serve solo per il calcolo





# üïí RESET AUTOMATICO A MEZZANOTTE, INIZIO SETTIMANA, INIZIO MESE, INIZIO ANNO
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              id(energia_ieri) = id(energia_giorno);
              id(energia_giorno) = 0.0;

     

      - seconds: 0
        minutes: 0
        hours: 0
        months: 1
        days_of_month: 1
        then:
          - lambda: |-
              id(energia_anno) = 0.0;
      
      # Reset energia stagionale a inizio stagione

      # üå∏ Reset Primavera (21 Marzo)
      - hours: 0
        minutes: 0
        seconds: 0
        months: 3
        days_of_month: 21
        then:
          - lambda: |-
              id(energia_primavera) = 0.0;

      # ‚òÄÔ∏è Reset Estate (21 Giugno)
      - hours: 0
        minutes: 0
        seconds: 0
        months: 6
        days_of_month: 21
        then:
          - lambda: |-
              id(energia_estate) = 0.0;

      # üçÇ Reset Autunno (21 Settembre)
      - hours: 0
        minutes: 0
        seconds: 0
        months: 9
        days_of_month: 21
        then:
          - lambda: |-
              id(energia_autunno) = 0.0;

      # ‚ùÑÔ∏è Reset Inverno (21 Dicembre)
      - hours: 0
        minutes: 0
        seconds: 0
        months: 12
        days_of_month: 21
        then:
          - lambda: |-
              id(energia_inverno) = 0.0;




      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - lambda: |-
              id(energia_settimana_scorsa) = id(energia_settimana);  // Memorizza il valore della settimana appena trascorsa
              id(energia_settimana) = 0.0;

      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - lambda: |-
              id(energia_mese_scorso) = id(energia_mese);  // Memorizza il valore del mese appena trascorso
              id(energia_mese) = 0.0;
